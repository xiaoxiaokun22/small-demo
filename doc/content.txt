模糊问题记录
1.在hashmap中怎么理解hash碰撞？//TODO-DONE
    其实就是hash(k1) = hash(k2)，然后计算存放的数组位置index=(n-1) & hash，可以看到k1和k2最终都存放到了一个数组下标中，就造成了碰撞。
但是一个数组下标又不能存多个元素，怎么解决这个碰撞呢？使用拉链法，将这两个元素使用链表结构存储。
2.hashmap的大小为什么是2的幂次方？//TODO-DONE
第一点：节省空间，减少hash碰撞的几率。怎么理解呢？我们知道哈希表索引index的计算方法为 tab[index=(n-1) & hash]，
当数组长度n为16时，此时减1为15（0000 1111），然后例如有一个hash为0110 0011，与操作的结果数组索引一定在0-15之间，并且0到15的每个位置
都可能被用到，不会浪费空间。
而如果不是2的次幂，我们看看会发生什么，举个例子：
数组长度为20（0001 0100），此时减1为19（0001 0011），hash为0110 1111，与操作的结果数组索引一定在0-19之间，但是一部分索引值永远都不会
取到，比如4，8，12等，浪费了数组的空间，并且还增加了hash碰撞的几率。
第二点：我们知道hashmap的初始大小为16（0001 0000），当hashmap要扩大2倍的时候，只需要位操作左移一位即可，位操作的速度很快。
4.hashmap数组为什么需要扩容？//TODO-DONE
当元素数量很多的时候，而数组长度一直为16，就会导致数组上的链表长度很长，会影响put和get元素的效率。
5.hashmap在jdk1.7和1.8的区别 //TODO-DONE
第一点：hash函数算法不一样，1.8效率变得更高了
第二点：1.7先扩容在添加元素，1.8相反
第三点：1.7是数组+链表，1.8是数组+链表+红黑树
第四点：1.7是头插法，1.8是尾插法
6.tableSizeFor的作用什么？//TODO-DONE
返回一个大于等于输入参数并且为2的n次幂的最小整数
tableSizeFor(5) = 8
tableSizeFor(25) = 32
7.hashmap和hashtable的区别是什么？
线程安全问题：hashmap是线程不安全的，hashtable是线程安全的，因为hashtable在方法上面都加了synchronized关键字。
键值为null问题：hashmap键值都可以为null，但是为null的键只能有一个，值为null的可以有多个。hashtable键值都不可以为null。
扩容大小问题：未自定义容量时，hashtable初始容量为11，扩容为原来的2n+1。hashmap初始容量为16，每次扩容变为原来的2倍。
    自定义容量时，hashtable直接使用这个容量。hashmap则会取大于等于这个数的2的幂次方的最小整数。
底层数据结构：hashtable就是数组+链表。而hashmap是数组+链表+红黑树，当链表长度大于等于阈值8时，会先判断数组长度是不是小于64，
    如果小于64，会先对数组扩容,否则，会将链表转化为红黑树。
8.hashmap的put(key,value)操作流程？//TODO-DONE
首先，判断数组tab是否为空，是的话扩容初始化一个长度为16的数组。如果数组中已经有元素了，接下来，计算新元素要放到的数组下标位置，
计算公式为index=hash(key)&(n-1)，然后判断tab[index]位置有没有元素，没有元素直接放到这个位置，有的话（hahs冲突），判断新老元素
的hash和key是否相等，相等则直接覆盖。不相等那么判断该元素是不是树结构，是的话对树添加新元素。不是树的话就循环链表。。。
9.hashmap和treemap的区别 TODO
treemap实现了接口NavigableMap，增加了搜索能力。
treemap实现了接口SortedMap,增加了对键排序的能力。
构造函数public TreeMap(Comparator<? super K> comparator)
10.hashmap在多线程下会发生什么(jdk1.7和1.8分别说明)？
jdk1.7的hashmap在put()元素时会形成闭环（循环链表），get()元素时会发生死循环。
jdk1.8解决了闭环和死循环的问题，但是还是不建议多线程使用hashmap，因为还有可能造成元素丢失。
11.hashmap什么情况下会rehash？
在hashmap数组需要扩容的时候。扩容实际是新建一个数组，把老数组的数据转移到新数组的过程。
而在这个过程中，需要重新元素要放到新数组的哪个下标位置，这个过程可以称为rehash。
12.jdk1.7下的hashmap为什么会形成循环链表？TODO
13.jdk1.7下的hashmap为什么会发生死循环？TODO
14.map的7种循环
https://mp.weixin.qq.com/s/zQBN3UvJDhRTKP6SzcZFKw
15.为什么重写equals()必须重写hashCode()方法
主要原因在使用HashSet，HashSet等hash类时，会出现一些问题。
比如在使用HashSet时，如果不重写hashCode()方法，会造成数据不去重问题。
User u1 = new User(1,"hgk");
User u2 = new User(1,"hgk");
HashSet<User> hashset = new HashSet<>();
hashset.add(u1);
hashset.add(u2);
hashset.size 输出为2，而不是1。因为计算数组下标的时候，在没有自己重写hashcode时，调用了Object的hashcode方法，而
Object的hashcode返回的是由对象存储地址转化得到的值，因此u1和u2的hash不一样，计算得到的下标就不一样，就会有两个值。
16.hashCode()相等，equals()一定相等吗？
不一定，主要原因是hash碰撞，虽然概率很小。
hash(k1) = hash(k2);k1.equals(k2)不一定相等。
17.equals相等，hashCode()一定相等吗？
第一种情况回答：
答：假如这个类没有重写equals方法，如果两个对象值相同(x.equals(y) == true)，那么那么它们的hashCode值一定要相同；
第二种情况回答：
答：但是如果重写equals方法，没有重写HashCode的方法，就会出现不相等的情况。

===[spring]===
1.spring是什么？为什么要用spring？spring有哪些模块组成？
spring是一个轻量级的控制反转和面向切面编程的J2EE框架，是一个容器框架，用来装javabean的。
核心模块7个：spring core,spring aop,spring web,spring mvc,spring dao,spring orm,spring context
2.spring bean的生命周期是什么？
bean初始化：扫描资源定位-解析类定义到BeanDefinition中-实例化
bean初始化-依赖注入 -> 接口BeanNameAware实现类的setBeanName() -> 接口BeanFactoryAware实现类的setBeanFactory()
-> 接口ApplicationContextAware实现类的setApplicationContext() -> 接口BeanPostProcessor实现类的前置初始化方法
-> @PostConstruct标注的自定义的初始化方法 ->  接口InitializingBean实现类的afterPropertiesSet()
-> 接口BeanPostProcessor实现类的后置初始化方法 -> bean生存期使用bean -> @PreDestroy标注的自定义的销毁方法
-> 接口DisposableBean实现类的destroy()
3.BeanFactory 和 ApplicationContext 的区别是什么？
相同点：
    1.都是接口，ApplicationContext继承了BeanFactory
    2.都可以用来配置xml属性
    3.都可以使用getBean()获取bean。
不同点：
    1.BeanFactory调用getBean()方法的时候才去实例化。而ApplicationContext在启动容器的时候把所有的bean都实例化了，不会等调用getBean()。
    2.ApplicationContext支持国际化，BeanFactory不支持
    3.ApplicationContext提供在监听器中注册bean的事件。
    4.ApplicationContext支持统一的资源文件访问方式。
    5.ApplicationContext的核心实现是ClassPathXmlApplicationContext,BeanFactory是XmlApplicationContext。
4.说说你对Spring Ioc的理解？
ioc是一个设计思想，就是将原来自己手动创建对象的控制权，交给spring框架来管理。
ioc容器是spring实现ioc的载体，ioc容器实际上是一个map，
里面存放的是各种对象。
作用：管理对象的创建和依赖关系的维护，方便解耦。
实现原理：工厂模式加反射机制。
5.说说你对Spring Aop的理解？
通用行为封装成重复模块。
打印日志
6.Spring事务的实现方式（事务分类）？
1）编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。
2）基于 TransactionProxyFactoryBean的声明式事务管理
3）基于 @Transactional 的声明式事务管理
4）基于Aspectj AOP配置事务
7.Spring事务的底层原理？有哪些隔离级别？有哪几种事务传播行为？
Spring事务的传播行为说的是，当多个事务同时存在的时候， Spring 如何
处理这些事务的行为。
只有@Transactional 注解应用到 public 方法，才能进行事务管理。
8.SpringMVC运行流程和启动流程？
9.Spring DI（依赖注入）是什么？有什么优点？注入方式有哪些？
依赖注入
10.Spring框架中的Bean是线程安全的么？如果线程不安全，那么如何处理?
spring中的bean默认单例模式，框架没有对bean进行多线程的处理。
如果bean是无状态的（没有成员变量,不存储数据），那么是线程安全的。
如果bean是有状态的（有成员变量，存储数据），那么它是线程不安全的。
应该如何解决呢，使用ThreadLocal，为每个线程提供一个独立的变量副本，不同线程操作自己的副本变量。
ThreadLocal和线程同步机制都是为了解决多线程中相同变量的访 问冲突问题。同步机制采用了“时间换空间”的方式，仅提供一份变量，
不同的线程在访问前需要获取锁，没获得锁的线程则需要排队。而ThreadLocal采用了“空间换时间”的方式。ThreadLocal会为每一个
线程提供一个独立的变量副本，从而隔离了多个线程对数据的访问冲突。因为每一个线程都拥有自己的变量副本，从而也就没有必要对该变量进行同步了。
12.Spring自动装配有哪些方式？
自动装配永远都是开启的，只是默认模式是no罢了
5种
no，默认的方式是不进行自动装配的，通过手动设置ref属性来装配bean，也可以使用@Autowired注解来手动注入需要的属性。
ByName
ByType
Constructor，利用构造函数进行装配，并且构造函数的参数通过ByType的方式自动装配。
Asutodetect，自动探测，如果有构造函数，通过construct的方式自动装配，否则使用ByType的方式自动装配。
使用@Autowired时，如果存在找到多个bean的情况下，使用@Qualifier("")通过名称匹配具体的bean。
13.AOP现有两个主要的流行框架，即Spring AOP和Spring+AspectJ关系?
14.Spring中用到哪些设计模式？
15.@Component 和 @Bean 的区别是什么？
16.@Component，@ComponentScan的作用是什么？
@Component 是标明哪个类被扫描进入Spring IoC容器。
@ComponentScan 则是标明采用何种策略去扫描装配 Bean，basePackages配置项首先可以定义扫描的包名，
在没有定义的情况下，它只会扫描当前包和其子包下的路径。
17.哪些常用的注解标明了@Component？
@Service
18.哪些常用的注解标明了@ComponentScan?
@SpringBootApplication
19.spring自动装配的原理？
20.spring事务什么时候会失效？
非public方法
@Transaction默认检测异常为RuntimeException及其子类 如果有其他异常需要回滚事务，需要自己手动配置，
例如：@Transactional(rollbackFor = Exception.class)
确保异常没有被try-catch{}，catch以后也不会回滚

【消息队列】
1.消息队列的使用场景
1>异步处理
场景说明：用户注册后，需要发注册邮件和注册短信。
2>应用解耦
场景说明：用户下单后，订单系统需要通知库存系统。
传统的做法是，订单系统调用库存系统的接口。假如库存系统无法访问，则订单减库存将失败，从而导致订单失败，订单系统与库存系统耦合。
正确做法：订单系统：用户下单后，订单系统完成持久化处理，将消息写入消息队列，返回用户订单下单成功
库存系统：订阅下单的消息，采用拉/推的方式，获取下单信息，库存系统根据下单信息，进行库存操作
3>流量削峰
大量请求进来后，限定一定数量的请求进来处理，其他的都返回网络拥挤等其他提示。

【redis】
1.怎么处理缓存穿透、雪崩、击穿的问题呢？
对空结果进行缓存，用来解决缓存穿透问题。
设置过期时间，且加上随机值进行过期偏移，用来解决缓存雪崩问题。
加锁，解决缓存击穿问题。另外需要注意，加锁对性能会带来影响。

【设计模式】
1.设计模式了解吗？说一下？
单例模式
从一个类中只能获取到一个实例
工厂模式
代理模式
观察者模式
2.spring中用了哪些设计模式？
spring ioc：beanFactory,ApplicationContext工厂模式
spring aop：代理模式
单例模式：spring bean作用域默认采用单例
【juc】
1.lock和synchronized的区别是什么
Lock是一个接口，显示锁，synchronized是一个关键字,隐式锁。
Lock不会主动加锁释放锁，是人为操作锁的。而synchronized是自动加锁释放锁的，在方法执行完或者异常时会释放锁。
Lock发生异常时不会主动释放锁，所以需要在try-finaly里去主动释放锁。而synchronized在发生异常时会释放锁。
多线程竞争越激烈，Lock的性能要优与synchronized
是否可手动释放，是否可中断，是否公平锁， 锁是否可绑定条件Condition。
2.多线程编程步骤：
    创建资源类=>资源类中判断，干活，唤醒=>创建多线程调用资源类的方法=>防止虚假唤醒问题
3.wait()方法存在什么问题？
  1>虚假唤醒问题：
  例如伪代码 method sync (){
    if(num != 1){ this.wait(); }
    do something
  }
  当判断num!=1时，该线程A进入wait状态。然后其他的某个线程B在运行，B运行完，A又抢到锁，此时A开始执行时不会再判断
  num，而是运行后面的do something操作。要使用while回去重新判断。wait的特点，在哪里等待，被唤醒时，就在哪里开始执行。
4.ReentrantLock多个condition和单个condition有啥区别？//TODO
5.synchronized具体表现形式有哪几种？
  普通同步方法，锁的是当前对象
  静态同步方法，锁的是当前类的class
  同步方法块，锁是synchronized()括号里配置的对象
6.synchronized锁的8种情况？
7.公平锁和非公平锁
synchronized为非公平锁
ReentrantLock两个都可以，默认为非公平锁，在构造参数传boolean值选择。
8.可重入锁（递归锁）和不可重入锁
  多个锁嵌套，获得最外层锁后，可以进入内层锁(同一把锁)的代码区域，就是可重入锁，synchronized和Lock都是可重入锁。
9.如何证明synchronized和Lock是可重入锁？
10.死锁的原因？
两个线程互相等待对方正在使用的资源。
11.如何解决死锁？
Lock接口的tryLock() 设置一定时间内获取不到锁就释放自己的所以资源。
多个线程按照相同的顺序去获取锁。
11.如何验证是否死锁？
    jps -l  --- 查看当前程序运行的进程
    jstack 进程号 --- 查看jvm堆栈信息。
    如何避免死锁？
    -线程每次只占用一个锁；
    -线程按照相同的顺序获取锁；
    -线程超时主动释放锁（tryLock()）
12.创建线程的方式有哪些？
   继承Thread类
   实现Runnable接口
   Callable接口
   线程池
13.并发和并行
并发是同一时间多个人做同一件事，并行是一个人同时做多件事情
14.JMM是什么，谈谈JMM。
   JMM是一种抽象的概念，是一个规范。要求保证可见性。原子性。有序性
   各个线程对主内存的共享变量操作，都是各个线程各自拷贝到自己的工作内存进行操作，再写回到主内存。
15.volatile是什么？有哪些特性
volatile是轻量级的同步机制(就是乞丐版的synchronized)。三大特性：1>保证可见性。2>不保证原子性。3>禁止指令重排
这里内存有两个概念：主物理内存和线程的工作内存
一个线程修改了主内存的值，立马通知其他的线程知道它修改了，就是可见性。
16.什么是可见性？原子性？
可见性：当一个线程修改了一个共享变量后，其他线程也知道这个共享变量被修改了。
原子性：一个线程的操作不能被其他线程打断，同一时间只有一个线程对同一个变量进行操作。
17.sleep和wait有啥区别
sleep是Thread类的方法，不会释放锁，也不需要占有锁。
wait是Object类的方法，调用它的前提是必须占有锁。
18.Thread.yield()的作用
让当前线程从运行状态转为就绪状态。
19.单例模式在多线程下会发生什么？怎么解决？
发生：多个线程调用获取单例的方法getInstance()，结果不再是单例，会创建多个实例。
解决1.可以对getInstance()方法加synchronized关键字。
解决2.双端检测单例机制（double check lock(DCL)
    可以在getInstance()方法里面，加synchronized(类名.class)代码块,并在前后都检测instance是否为空。
19.1 双端检测单例机制一定线程安全吗？
   可能会出现指令重排，造成创建多个实例，线程不安全。
20.如何解决volatile不保证原子性造成的问题？
不保证原子性会造成数据丢失。解决方案一使用Atomic***相关类。解决方案二使用synchronized，但是太重了。
21.什么是指令重排？什么情况下会出现指令重排？怎么解决指令重排造成的问题？
指令重排就是底层cpu执行指令的顺序不一定按照代码的顺序执行，中间经过重新排序，顺序可能已经乱了。
单线程不需要考虑指令重排问题，是按代码顺序执行的。
多线程下，会出现指令重排，可以加volatile禁止指令重排。
22.i++线程安全吗？不安全
23.CAS是什么？作用是什么？什么情况会用CAS？底层原理是什么？
CAS英文compare and swap,比较并交换。
作用：多线程下保证线程的原子性，同一时间只有一个线程对同一个变量操作修改。
场景：多线程下修改某个变量值的时候
底层原理：先了解三个变量：主内存变量值，工作内存快照值，更新值
每次修改前（写入主内存前），都会判断主内存变量值和工作内存快照值的值，如果相等，就会修改。
ABA问题如何解决？
添加一个版本号，操作的变量每次修改后版本都加1，修改时还要判断版本号是否相等。
24.AtomiceInteger为什么不用synchronized而用CAS保证原子性？
25.Hashmap和currentHashmap的区别？
底层
扩容机制
26.什么是守护线程？
java中两类线程：User Thread（用户线程）和Daemon Thread（守护线程）。
任何一个守护线程都会守护整个JVM中所有的非守护线程，只要当前JVM中还有任何一个非守护线程没有结束，守护线程就全部工作，当所有的非守护线程全部结束后，守护线程也会随着JVM一同结束。守护线程最典型的应用就是GC（垃圾回收器）。
需要注意的地方：
1、thread.setDaemon(true)方法必须在thread.start()之前设置，否则会报IllegalThreadStateException异常，不能把正在运行的常规线程设置为守护线程。
2、在守护线程中产生的新线程也是守护线程。
3、不是所有应用都可以分配守护线程来进行服务，比如读写操作或是计算逻辑等。因为如果非守护线程都结束了，但是读写或计算逻辑没有完成，守护线程也会停止。
判断线程是否为守护线程的方法是：isDaemon()，返回true为守护线程，返回false为非守护线程


